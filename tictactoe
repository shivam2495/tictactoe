pragma solidity ^0.4.8;

contract TicTacToe{
    
    uint participationFee;
    uint n;
    uint start;
    address private admin;
    uint[3][3] matrix;
    address[] participants;
    mapping(address => bool) isParticipantAlreadyPresent;
    mapping(address => uint) playerNumber;
    uint move;
    uint playerTurn = 0;
    uint Winner;
    
    modifier notAdmin(){
        require(msg.sender!=admin,"Admin cannot become a particiant");
        _;
    }
    
    modifier feeEqualToPFee(uint _participationFee){
        require(_participationFee==participationFee,"Any Fee other than participationFee is not acceptable");
        _;
    }
    
    modifier verifyRevealDeadline(){
        require((n==0 || now-start <= 300) ,"More Participants are required");
        _;
    }
    
    modifier numberOfParticipants(){
        require(n>0,"No more participants can participate");
        _;
    }
    
    modifier notAlreadyRegistered(address participant){
        require(isParticipantAlreadyPresent[participant]==false,"You have already registered");
        _;
    }
    
    
    modifier isPlayerTurn(address participant){
        require(playerNumber[participant]==playerTurn,"You have already registered");
        _;
    }
    
    modifier hasGameNotEnded(){
        require(Winner == 0,"You have already registered");
        _;
    }
    
    modifier hasSquareNotBeenTaken(uint x, uint y){
        require(matrix[x][y] == 0,"Square has been Taken");
        _;
    }
    
    constructor(uint _participationFee)
    public
    {   
        n=2;
        participationFee = _participationFee;
        start = now;
    }
    
    
    function registerParticipants()
    public
    numberOfParticipants
    notAdmin
    payable
    {
        n = n-1;
        participants.push(msg.sender);
        isParticipantAlreadyPresent[msg.sender] = true;
    }
    
    
    
    
    function playerMove(uint x, uint y)
    public
    isPlayerTurn(msg.sender)
    hasGameNotEnded
    notAdmin
    hasSquareNotBeenTaken(x,y)
    {
        matrix[x-1][y-1] = playerTurn+1;
        checkWinner();
        playerTurn = 1 - playerTurn;
    }
    
    
    function checkWinner()
    private
    {
        if(matrix[0][0]!=0 && matrix[0][0]==matrix[0][1] && matrix[0][0]==matrix[0][2])
        {
            Winner = matrix[0][0] - 1;
            return;
        }
        if(matrix[1][0]!=0 && matrix[1][0]==matrix[1][1] && matrix[1][0]==matrix[1][2])
        {
            Winner = matrix[1][0] - 1;
            return;
        }
        if(matrix[2][0]!=0 && matrix[2][0]==matrix[2][1] && matrix[2][0]==matrix[2][2])
        {
            Winner = matrix[2][0] - 1;
            return;
        }
        if(matrix[0][0]!=0 && matrix[0][0]==matrix[1][0] && matrix[0][0]==matrix[2][0])
        {
            Winner = matrix[0][0] - 1;
            return;
        }
        if(matrix[0][1]!=0 && matrix[0][1]==matrix[1][1] && matrix[0][1]==matrix[2][1])
        {
            Winner = matrix[0][1] - 1;
            return;
        }
        if(matrix[0][2]!=0 && matrix[0][2]==matrix[1][2] && matrix[0][2]==matrix[2][2])
        {
            Winner = matrix[0][2] - 1;
            return;
        }
        if(matrix[0][0]!=0 && matrix[0][0]==matrix[1][1] && matrix[0][0]==matrix[2][2])
        {
            Winner = matrix[0][0] - 1;
            return;
        }
        if(matrix[0][2]!=0 && matrix[0][2]==matrix[1][1] && matrix[2][0]==matrix[0][2])
        {
            Winner = matrix[0][2] - 1;
            return;
        }
    }
    
    
    
    
    
    
    
}
